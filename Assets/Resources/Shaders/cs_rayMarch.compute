#pragma kernel CSRayMarching

#include "Assets/Resources/Shaders/SimplexNoise2D.cginc"

RWTexture2D<float4> Result;
RWTexture2D<float4> out_CsBuf_normal;
RWTexture2D<float4> out_CsBuf_surface;

uniform bool uTriggerTexMode;
uniform bool uTriggerUvMode;

uniform int u_particle_num_sqrt;
uniform float3 u_translate;
uniform float uTime;
uniform float uBgExposure;
uniform float2 _ScreenParams;
uniform float3 _WorldSpaceCameraPos;
uniform float3 _WorldSpaceLightPos0;

Texture2D<float4> u_cs_buf_pos_and_life;
Texture2D<float4> u_cs_buf_vel_and_scale;

Texture2D<float4> uPopPosLife;
Texture2D<float4> uPopCollision;

Texture2D<float4> uTexPattern;
SamplerState sampleruTexPattern;

TextureCube<float4> uCube_radiance;
SamplerState sampleruCube_radiance;
TextureCube<float4> uCube_irradiance;

float4x4 uProjInv;
float4x4 uViewInv;

// Blob
//
struct Blob
{
	float3 pos;
	float scale;
	float3 vel;
	float life;
};
// -

float4x4 rotationMatrix(float3 axis, float angle)
{
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;

	return float4x4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0.0,
		oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0.0,
		oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0.0,
		0.0, 0.0, 0.0, 1.0);
}

// custom functions
//
// raymarching codes from "Metaballs - Quintic" by Inigo Quilze
//
// The MIT License
// Copyright © 2013 Inigo Quilez
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Using polynomial fallof of degree 5 for bounded metaballs, which produce smooth normals
// unlike the cubic (smoothstep) based fallofs recommended in literature (such as John Hart).

// The quintic polynomial p(x) = 6x5 - 15x4 + 10x3 has zero first and second derivatives in
// its corners. The maxium slope p''(x)=0 happens in the middle x=1/2, and its value is 
// p'(1/2) = 15/8. Therefore the  minimum distance to a metaball (in metaball canonical 
// coordinates) is at least 8/15 = 0.533333 (see line 63).

// This shader uses bounding spheres for each ball so that rays traver much faster when far
// or outside their radius of influence.
// https://www.shadertoy.com/view/ld2GRz
//
float3 hash3(float n)
{
	return frac(sin(float3(n, n + 1.0, n + 2.0))*float3(43758.5453123, 22578.1459123, 19642.3490423));
}

float sdf_metaBall(float3 _point)
{
	float is_in_sphere = 0.0;
	float p = 0.0;
	float dmin = 1e20;

	float h = 1.; // track Lipschitz constant

	for (int i = 0; i < 7; i++)
	{
		for (int j = 0; j < 7; j++)
		{
			int3 _texel_coords = int3(i, j, 0);
			float3 blob_pos = u_cs_buf_pos_and_life.Load(_texel_coords).xyz + u_translate;
			float blob_scale = u_cs_buf_vel_and_scale.Load(_texel_coords).w;

			// bounding sphere for ball
			float db = length(blob_pos - _point);
			if (db < blob_scale)
			{
				float x = db / blob_scale;
				p += 1.0 - x * x*x*(x*(x*6.0 - 15.0) + 10.0);
				is_in_sphere = 1.0;
				h = max(h, 0.5333 * blob_scale);
			}
			else // this is out of bounding sphere 
			{
				dmin = min(dmin, db - blob_scale);
			}
		}
	}

	float d = dmin + 3.;

	if (is_in_sphere > 0.5)
	{
		float th = 0.2;
		d = h * (th - p);
	}

	return d;
}

float distanceField(in float3 _point)
{
	return sdf_metaBall(_point);
}

float2 intersect(in float3 _rayOrigin, in float3 _rayDirection)
{
	float epsilon = 0.1;
	float maxDist = 200.;
	float step = epsilon * 2.0;
	float dist = 0.0;
	float m = 1.0;

	for (int i = 0; i < 200; i++)
	{
		step = distanceField(_rayOrigin + _rayDirection * dist);

		if (step < epsilon || dist > maxDist)
			break;

		dist += step;
	}

	// this ray goes out of far plane 
	if (dist > maxDist)
		m = -1.0;

	return float2(dist, m);
}

float3 calcNormal(in float3 _point)
{
	float3 nor = float3(0.0, 0.0001, 0.0);

	for (int i = 0; i < 7; i++)
	{
		for (int j = 0; j < 7; j++)
		{
			int3 _texel_coords = int3(i, j, 0);
			float3 blob_pos = u_cs_buf_pos_and_life.Load(_texel_coords).xyz + u_translate;
			float blob_scale = u_cs_buf_vel_and_scale.Load(_texel_coords).w;

			float db = length(blob_pos - _point);
			float x = clamp(db / blob_scale, 0.0, 1.0);
			float p = x * x*(30.0*x*x - 60.0*x + 30.0);
			nor += normalize(_point - blob_pos) *p / blob_scale;
		}

	}

	return normalize(nor);
}

float calcAO(in float3 _point, in float3 _normal)
{
	float totao = 0.0;
	for (int aoi = 0; aoi < 32; aoi++)
	{
		float3 aopos = -1.0 + 2.0 * hash3(float(aoi)*213.47);
		aopos *= sign(dot(aopos, _normal));
		aopos = _point + aopos * 0.5;
		float dd = clamp(distanceField(aopos).x*4.0, 0.0, 1.0);
		totao += dd;
	}
	totao /= 16.0;
	return clamp(totao*totao*1.5, 0.0, 1.0);
}

float calcShadow(in float3 _rayOrigin, in float3 _rayDirection, float _mint, float _k)
{
	float res = 1.0;
	float t = _mint;
	for (int i = 0; i < 32; i++)
	{
		float h = distanceField(_rayOrigin + _rayDirection * t).x;
		res = min(res, _k * h / t);
		if (res < 0.0001) break;
		t += clamp(h, 0.01, 0.5);
	}
	return clamp(res, 0.0, 1.0);
}

void calcPopRef(inout float3 col, in float3 surface, in float3 normal, in float3 eye) 
{
	if (uBgExposure < .2)
	{
		uint i, j;
		for (i = 0; i < 40; i += 1)
			for (j = 0; j < 40; j += 1)
			{
				uint3 coord = uint3(i, j, 0);
				float4 popCol = uPopCollision.Load(coord);
				float3 popColor = popCol.rgb;
				float popColFactor = popCol.a;

				if (popColFactor > 1.)
				{
					float3 popPos = uPopPosLife.Load(coord);
					float dist = distance(popPos, surface);
					float maxDist = 15.;

					if (dist < maxDist)
					{
						float3 l2S = normalize(surface - popPos);
						float3 refl = reflect(l2S, normal);
						float3 s2C = normalize(eye - surface);

						float diffuse = max(0.0, dot(normal, -l2S));
						float spec = pow(max(0.0, dot(s2C, reflect(l2S, normal))), 14.);

						if (diffuse > 0.) {
							col += max(spec * popColor * (maxDist - dist) / maxDist * popColFactor * 115., 0.);
						}
					}
				}

			}
	}
}

void render(in float3 _pixels, inout float4 _col, inout float3 out_normal, inout float3 out_surface)
{
	float2 m_coords = (_pixels.xy + 1.) * .5;
	// Setup rays
	//
	float4 m_pixels = float4(_pixels, 1.);
	m_pixels = mul(uProjInv, m_pixels);
	m_pixels.xyz /= m_pixels.w;
	m_pixels = mul(uViewInv, m_pixels);
	float3 m_rayOrigin = _WorldSpaceCameraPos;
	float3 m_rayDir = normalize(m_pixels.xyz - m_rayOrigin);
	
	// TODO - depth seems incorrect
	//
	// linear view space depth for depth testing between raymarch and mesh geometry
	// https://flafla2.github.io/2016/10/01/raymarching.html
	//
	// float m_geo_depth = LinearEyeDepth(tex2D(_CameraDepthTexture, m_uv).r);

	
	// march ray
	// - metaball
	// https://www.shadertoy.com/view/ld2GRz
	// - lighting
	// https://www.shadertoy.com/view/lssGRM
	//

	float2 m_rayMarch = intersect(m_rayOrigin, m_rayDir);
	float3 m_col = _col.rgb;
	float3 m_light = normalize(_WorldSpaceLightPos0);
	float3 m_fill = float3(0, -1, 0);
	float3 m_lightCol = float3(1., 1., 1.);

	if (m_rayMarch.y > -.5)
	{
		// Geometry 
		float m_distanceMap = m_rayMarch.x;
		float3 m_geometry = m_rayOrigin + m_distanceMap * m_rayDir;
		float3 m_normal = calcNormal(m_geometry);
		float3 m_reflect = reflect(m_rayDir, m_normal);
		m_reflect = mul(rotationMatrix(float3(0, 1, 0), -uTime), float4(m_reflect, 1.)).xyz;

		out_normal = m_normal;
		out_surface = m_geometry;
		
		float3 m_blob_col = float3(1., 1., 1.);
		
		for (int i = 0; i < 7; i++)
		{
			for (int j = 0; j < 7; j++)
			{
				int3 _texel_coords = int3(i, j, 0);
				float4 _data = u_cs_buf_vel_and_scale.Load(_texel_coords);
				float3 blob_vel = _data.xyz;
				float blob_scale = _data.w;
				_data = u_cs_buf_pos_and_life.Load(_texel_coords);
				float3 blob_pos = _data.xyz + u_translate;
				float blob_life = _data.w;

				float x = clamp(length(blob_pos - m_geometry) / blob_scale, 0.0, 1.0);

				float p = 1.0 - x * x*(3.0 - 2.0*x);

				m_blob_col += (pow(abs(blob_life) * .9, 4.3) * p);
			}
		}

		// lighting
		float m_occ = 1.;// calcAO(m_geometry, m_normal);
		float m_amb = 0.8 + 0.2 * m_normal.y;
		float m_dif = max(dot(m_normal, m_light), 0.0);
		float m_fil = max(dot(m_normal, m_fill), 0.0);
		float m_sha = 1.0;
		//if (m_dif>0.001)
		//	m_sha = calcShadow(m_geometry + 0.001*m_normal, m_light, 0.1, 32.0);
		float m_fre = pow(clamp(1.0 + dot(m_normal, m_rayDir), 0.0, 1.0), 2.0);

		// environmental map 
		float3 mEnvMap =
			pow(max(uCube_radiance.SampleLevel(sampleruCube_radiance, m_reflect, 0).ggg, 0.), 4.2)
			* pow(m_fre, 2.) *.9991 + .0001;

		// material
		float3 m_material = mEnvMap;

		if (uTriggerTexMode)
		{
			float2 mUv = ((normalize(m_geometry) + 1.) * .5);
			if (uTriggerUvMode)
			{
				float u = atan(m_normal.z / m_normal.x) / 3.141592 * 2.0;
				float v = asin(m_normal.y) / 3.141592 * 2.0;
				mUv = (float2(u, v) + 1.) * .5;
			}
			
			float3 mPattern = uTexPattern.SampleLevel(sampleruTexPattern, mUv, 0).rgb;
			m_material *= mPattern;
		}

		// brdf
		float3 m_brdf = float3(1., 1., 1.);
		calcPopRef(m_brdf, m_geometry, m_normal, m_rayOrigin);

		m_brdf += .6 * m_amb * m_blob_col * m_occ * uBgExposure;
		m_brdf += 1. * m_dif * m_blob_col 
			* pow(float3(m_sha, m_sha, m_sha), 1.);
		m_brdf += 45.6 * pow(m_dif, 24.) * m_blob_col * m_occ;
		m_brdf += .1 * m_fil * m_blob_col * m_occ;
		m_brdf += .3 * m_fre * m_blob_col * m_occ * (0.2 + 0.8 * m_sha);
		
		m_brdf += 2999. * m_occ * m_lightCol *
			m_occ * max(dot(-m_normal, m_light), 0.0) * 
			pow(clamp(dot(m_rayDir, m_light), 0.0, 1.0), 8.0) * m_rayMarch.y * 2.0;

		// surface-light interacion
		m_col = m_brdf * m_material;
		m_col = clamp(m_col, 0, 500.);

		// fog 
		/*m_col = lerp(m_col, _col.rgb, 
			clamp(1.0 - 1.2 * exp(-0.00005 * m_rayMarch.x*m_rayMarch.x), 0.0, 1.0));*/

		_col.a = m_distanceMap;
	}
	else
	{
		float3 sun = 
			3. * m_lightCol
			* pow(clamp(dot(m_rayDir, m_light), 0.0, 1.0), 4.0);
	}
	// sun scatter
	/*m_col += 10. * m_lightCol *
		pow(clamp(dot(m_rayDir, m_light), 0.0, 1.0), 12.0);*/

	// post processing
	m_col = pow(max(m_col, 0.), 0.45);
	m_col += (1.0 / 255.0) * hash3(m_coords.x + 13.0*m_coords.y);

	_col.rgb = m_col;
}
// -

[numthreads(8,8,1)]
void CSRayMarching (uint3 id : SV_DispatchThreadID)
{
	float2 mCoords = (float2)id.xy / _ScreenParams;
	float3 mPixels = float3(mCoords * 2. - 1., 1.);
	float4 mCol = float4(.0, .0, .0, 1e20);
	mCol.rgb += uBgExposure * .2;

	float3 mNormal = float3(0, 0, 0);
	float3 mSurface = float3(0, 0, 0);
	render(mPixels, mCol, mNormal, mSurface);

	Result[id.xy] = mCol;
	out_CsBuf_surface[id.xy] = float4(mSurface, 1.);
	out_CsBuf_normal[id.xy] = float4(mNormal, 1.);
}
