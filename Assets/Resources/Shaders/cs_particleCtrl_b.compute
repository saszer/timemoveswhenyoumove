// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel cs_init_buffers
#pragma kernel cs_update_buffers

// import noise lib
#include "Assets/Resources/Shaders/SimplexNoise3D.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> out_pos_and_life;
RWTexture2D<float4> out_vel_and_scale;

// uniforms
//
Texture2D<float4> u_p_pos_and_life;
Texture2D<float4> u_p_vel_and_scale;
bool uIsCentered;
bool uIsInsideCube;
bool uTriggerScaleJump;
float u_time_delta;
float u_time;
float uTreb = 0.;
float uBass = 0.;
bool uTrebHit = false;
bool uBassHit = false;
float u_blob_scale_factor;
float3 u_stay_in_cube_range;
// -

// Custom Functions
//
float4 reset_pos_and_life(in float3 _seed) 
{
	float4 _data = snoise_grad(_seed * 5678.9012);
	float3 pos = _data.xyz;
	float life = abs(_data.w * 6. + 1.);

	return float4(pos, life);
}

float4 reset_vel_and_scale(in float3 _seed)
{
	float4 _data = snoise_grad(_seed * 1234.5678);
	float3 vel = _data.xyz * 2.4;
	float scale = length((_data.xyz * 10.2) * u_blob_scale_factor) + 2.;

	return float4(vel, scale);
}

void revive(inout float3 _pos, inout float _life, inout float3 _vel, inout float _scale)
{
	float4 _data = reset_pos_and_life(_pos);
	_pos = _data.xyz;
	_life = _data.w;
	
	_data = reset_vel_and_scale(_pos);
	_vel = _data.xyz;
	_scale = _data.w;
}

void calcGravity(inout float3 _vel, in float3 _pos, inout float _scale)
{
	float _dist = length(_pos);
	if (_dist > .5)
	{
		float3 _dir = normalize(-_pos);
		float3 _f = _dir * _scale / (_dist * _dist) * .8;
		_vel += _f;

		_scale += length(_f)*.01;
	}
}

void jumpScale(inout float _scale, inout float _life, inout float3 _vel, in float3 _pos)
{
	float4 _data = snoise_grad((_vel * 123.456 + _pos * 901.234) );
	float factor = ((uBass - .5)*2.);
	float3 nv = _data.xyz * 12.4;
	_vel = lerp(_vel, nv, factor);
	float ns = length((_data.xyz * 12.4 * .42) * u_blob_scale_factor) + 2.;
	_scale = lerp(_scale, ns, factor);
	float nl = abs(_data.w * 20. + 1.);
	_life = lerp(_life, nl, factor);
}

void jumpLife(in float _scale, inout float _life, in float3 _vel, in float3 _pos)
{
	float rand = snoise((_vel * 123.456 + _pos * 901.234));
	_life = abs(pow(rand, 4.) * 20.) + 1.;
}

void stay_in_cube(inout float3 _pos, in float _scale, inout float3 _vel)
{
	float bounce_decay = -.3;
	float3 random_dir = normalize(snoise_grad(_vel + _pos).rgb);
	if (_pos.x < -u_stay_in_cube_range.x)
	{
		_pos.x = -u_stay_in_cube_range.x;
		_vel.x *= bounce_decay;

		_vel += random_dir;
	}
	if (_pos.x > u_stay_in_cube_range.x)
	{
		_pos.x = u_stay_in_cube_range.x;
		_vel.x *= bounce_decay;

		_vel += random_dir;
	}

	if (_pos.y < -u_stay_in_cube_range.y)
	{
		_pos.y = -u_stay_in_cube_range.y;
		_vel.y *= bounce_decay;

		_vel += random_dir;
	}
	if (_pos.y > u_stay_in_cube_range.y)
	{
		_pos.y = u_stay_in_cube_range.y;
		_vel.y *= bounce_decay;

		_vel += random_dir;
	}

	if (_pos.z < -u_stay_in_cube_range.z)
	{
		_pos.z = -u_stay_in_cube_range.z;
		_vel.z *= bounce_decay;

		_vel += random_dir;
	}
	if (_pos.z > u_stay_in_cube_range.z)
	{
		_pos.z = u_stay_in_cube_range.z;
		_vel.z *= bounce_decay;

		_vel += random_dir;
	}
}
// -


// CS Functions
//
[numthreads(7, 7, 1)]
void cs_init_buffers(uint3 id : SV_DispatchThreadID)
{
	float4 seed = reset_pos_and_life(float3(id));
	out_pos_and_life[id.xy] = seed;
	out_vel_and_scale[id.xy] = reset_vel_and_scale(seed.xyz);
}

[numthreads(7, 7, 1)]
void cs_update_buffers(uint3 global_id : SV_DispatchThreadID, uint3 local_id : SV_GroupThreadID)
{	
	// unpack data to vars
	float4 _data = u_p_pos_and_life.Load(int3(global_id.xy, 0));
	float3 m_pos = _data.xyz;
	float m_life = _data.w;
	_data = u_p_vel_and_scale.Load(int3(global_id.xy, 0));
	float3 m_vel = _data.xyz;
	float m_scale = _data.w;

	// update events
	if (m_life < .001) 
		revive(m_pos, m_life, m_vel, m_scale);
	
	if(uIsInsideCube)
		stay_in_cube(m_pos, m_scale, m_vel);
	
	if (uIsCentered)
		calcGravity(m_vel, m_pos, m_scale);

	if (uTriggerScaleJump)
		jumpScale(m_scale, m_life, m_vel, m_pos);

	if (uTrebHit)
		jumpLife(m_scale, m_life, m_vel, m_pos);

	// update data 

	m_vel *= .99;
	m_life *= .93;

	m_scale *= min(m_life * 15., 1.);
	m_scale = max(m_scale, .01);

	m_pos += m_vel * u_time_delta * (.1 + (uBass + uTreb));
	
	// out data
	out_pos_and_life[global_id.xy] = float4(m_pos, m_life);
	out_vel_and_scale[global_id.xy] = float4(m_vel, m_scale);
}
